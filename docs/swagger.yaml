swagger: '2.0'
info:
  description: Pho Networks REST API
  version: "1.1.0"
  title: Social Graph API
  contact:
    email: emre@phonetworks.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT


paths:
  /founder:
    get:
      operationId: getFounder
      summary: retrieves the Graph Founder
      description: |
        The Founder must be a \Pho\Framework\Actor object. 
        This method returns the object type as well as object ID.
      produces:
      - application/json
      responses:
        200:
          description: The Founder has been located.
          schema:
              type: object
              required:
              - id
              - class
              properties:
                id:
                  type: string
                  format: uuid
                  example: 49fcc36403b8d5594a95250e88dfd56a
                class:
                  type: string
                  example: PhoNetworksAutogenerated\User
  /graph:
    get:
      operationId: getGraph
      summary: retrieves the main Graph
      description: |
        The Graph must be a \Pho\Lib\Graph\SubGraph and \Pho\Framework\Graph object. 
        This method returns the object type as well as object ID.
        The Graph contains all nodes and edges in the system. 
        Though it is contained by Space, its one and only container.
      produces:
      - application/json
      responses:
        200:
          description: The Graph has been located.
          schema:
              type: object
              required:
              - id
              - class
              properties:
                id:
                  type: string
                  format: uuid
                  example: 3aba8264bd147746d39860cef332363b
                class:
                  type: string
                  example: PhoNetworksAutogenerated\Graph
              
  /space:
    get:
      operationId: getSpace
      summary: retrieves the Space
      description: |
        The Space must be a \Pho\Lib\Graph\Graph object. 
        This method returns the object type as well as object uuid.
        Space always comes with the nil ID; 
        00000000000000000000000000000000, and under normal circumstances
        its class is always Pho\Kernel\Standards\Space
      produces:
      - application/json
      responses:
        200:
          description: The space has been located.
          schema:
              type: object
              required:
              - id
              - class
              properties:
                id:
                  type: string
                  format: uuid
                  example: "00000000000000000000000000000000"
                class:
                  type: string
                  example: Pho\Kernel\Standards\Space

  /actor:
    post:
      operationId: makeActor
      summary: creates an Actor object
      description: |
       Fetches whatever set as "default_object"=>"actor" while determining what Actor object to construct.
       If it doesn't exist, uses "default_object"=>"founder" class. Otherwise fails.
      produces:
      - application/json
      parameters:
      - in: body
        name: param1
        description: |
          Actor constructor argument. More parameters may be passed
          via param2, param3 ... param50.
        required: false
        schema:
          type: string
          description: A sample password.
          example: "1234567"
      responses:
        200:
          description: Returns the ID of the created Actor object.
          schema:
            type: string
            format: uuid
            example: "4f9e769ff6fe4cee02b3b4547200db6b"
        500:
          description: Failure.

  /edge/{uuid}:
    get:
      operationId: getEdge
      summary: retrieves an edge
      description: |
        By passing in an ID, you can search for
        available edges in the system. 
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: The edge ID
        required: true
        type: string
      responses:
        200:
          description: Edge with given ID
          schema:
              $ref: '#/definitions/Edge'
        500:
          description: Failure. Either the edge does not exist or it's not an edge.

  /{uuid}:
    get:
      operationId: getNode
      summary: retrieves a node
      description: |
        By passing in an ID, you can search for
        available nodes in the system. Please note, this function will not return
        edges. This method  is  reserved for nodes only. 
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: The node ID
        required: true
        type: string
      responses:
        200:
          description: Node with given ID
          schema:
              $ref: '#/definitions/Node'
        500:
          description: Failure. Either the node does not exist or it's not a node.
    delete:
      operationId: delEntity
      summary: deletes an entity
      description: |
        Works with all entities, including nodes and edges. 
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Success.
        500:
          description: |
            Failure. The entity (node/edge) does not exist or there was a 
            problem deleting.
          
  /{uuid}/type:
    get:
      operationId: getType
      summary: fetches entity type
      description: |
        Possible values are; "Space", "Node", "Graph Node", "Graph", "Actor Node"
        "Object Node", "Edge", "Read Edge", "Write Edge", "Subscribe Edge",
        "Mention Edge", "Unidentified".
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: the node
        required: true
        type: string
      responses:
        200:
          description: Entity Type
          schema:
            type: string
            example: "Mention Edge"

  /{uuid}/edges/all:
    get:
      operationId: getAllEdges
      summary: retrieves the edges of a node
      description: |
        By passing in a node ID, you can fetch all
        the edges of the node in question; including incoming and
        outgoing.
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: The node ID
        required: true
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
              type: object
              required:
              - from
              - to
              - in
              - out
              properties: 
                from:
                  type: array
                  items:
                    $ref: '#/definitions/NodeEdge'
                to:
                  type: array
                  items:
                    $ref: '#/definitions/NodeEdge'
                in:
                  type: array
                  items:
                    type: object
                    required:
                    - "5f9e769ff6fe4cee02b3b4547200db6b"
                    properties:
                      "5f9e769ff6fe4cee02b3b4547200db6b":
                        $ref: '#/definitions/NodeEdge'
                out:
                  type: array
                  items:
                    type: object
                    required:
                    - "5f9e769ff6fe4cee02b3b4547200db6b"
                    properties:
                      "5f9e769ff6fe4cee02b3b4547200db6b":
                        $ref: '#/definitions/NodeEdge'
        500:
          description: Failure.

  /{uuid}/edges/in:
    get:
      operationId: getIncomingEdges
      summary: retrieves the incoming edges of a node
      description: |
        By passing in a node ID, you can fetch 
        the incoming edges of the node in question.
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: the node ID
        required: true
        type: string
      responses:
        200:
          description: The incoming edges.
          schema:
            type: array
            items:
              $ref: '#/definitions/NodeEdge'
        500:
          description: Failure.

  /{uuid}/edges/out:
    get:
      operationId: getOutgoingEdges
      summary: retrieves the outgoing edges of a node
      description: |
        By passing in a node ID, you can fetch 
        the outgoing edges of the node in question.
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: the node ID
        required: true
        type: string
      responses:
        200:
          description: The outgoing edges.
          schema:
            type: array
            items:
                $ref: '#/definitions/NodeEdge'
        500:
          description: Failure.

  /{uuid}/edges/getters:
    get:
      operationId: getEdgeGetters
      summary: retrieves the edge getter methods of a node
      description: |
        By passing in a node UUID that exists in the database, you can fetch 
        the edge getter methods of the node in question.
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: The node ID
        required: true
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              type: string
            example: ["followers", "notifications", "follows", "likes", "posts"]
        500:
          description: Failure.  Either the node does not exist or the entity is not a node.

  /{uuid}/edges/setters:
    get:
      operationId: getEdgeSetters
      summary: retrieves the edge setter methods of a node
      description: |
        By passing in a node UUID that exists in the database, you can fetch 
        the edge setter methods of the node in question. These setters may or 
        may not be formative. If they are formative, a new node is created
        in result.
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: The node ID
        required: true
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              type: string
            example: ["consume", "follow", "like", "post"]
        500:
          description: Failure. Either the node does not exist or the entity is not a node.


  /{uuid}/attributes:
    get:
      operationId: getAttributes
      summary: retrieves the existing attribute keys of an entity (edge or node)
      description: |
        Attribute keys are case-sensitive, and they will be listed
        in an array.
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: The node ID
        required: true
        type: string
      responses:
        200:
          description: Attribute keys
          schema:
            type: array
            items:
              type: string
            example: ["Status", "CreateTime"]

        400:
          description: bad input parameter

  /{uuid}/attribute/{key}:
    get:
      operationId: getAttribute
      summary: retrieves the value of an entity attribute
      description: |
        Attribute key must be case-sensitive.
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: The node ID
        required: true
        type: string
      - in: path
        name: key
        description: The attribute key
        required: true
        type: string
      responses:
        200:
          description: The attribute's value or nil if the attribute does not exist.
          schema:
            type: string
            example: "This is new tweet"
    post:
      operationId: addAttribute
      summary: updates (or creates) an attribute
      description: |
        Works with all entities, including nodes and edges. Given its key, updates an 
        attribute value, or creates it, if it doesn't yet exist.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: value
        description: The value to update the key with.
        schema:
          type: string
          required: 
            - value
          properties:
            value:
              type: string
              example: my second tweet
      responses:
        200:
          description: Attribute updated
          schema:
            type: object
            required: 
            - success
            properties:
              success:
                type: boolean
                example: true
    put:
      operationId: setAttribute
      summary: updates (or creates) an attribute
      description: |
        Works with all entities, including nodes and edges. Given its key, updates an 
        attribute value, or creates it, if it doesn't yet exist.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: value
        description: The value to update the key with.
        schema:
          type: string
          required: 
            - value
          properties:
            value:
              type: string
              example: my second tweet
      responses:
        200:
          description: Attribute updated
          schema:
            type: object
            required: 
            - success
            properties:
              success:
                type: boolean
                example: true
    delete:
      operationId: delAttribute
      summary: deletes an attribute
      description: |
        Works with all entities, including nodes and edges. Given its key, deletes an 
        attribute.
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Attribute deleted.
          schema:
            type: object
            required: 
            - success
            properties:
              success:
                type: boolean
                example: true
        500:  
          description: Failure. If the attribute does not exist.

  /{uuid}/{edge}:
    get:
      operationId: getNodeEdge
      summary: edge getter
      description: |
        Fetches edge results, whether as edge IDs or node IDs, depending
        on edge's characteristics. 
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: The node ID
        required: true
        type: string
      - in: path
        name: edge
        description: The edge getter label
        required: true
        type: string
      responses:
        200:
          description: Result ID(s)
          schema:
            type: array
            items:
              type: string
            example: ["507dfe57b69c16661d37914952a55129"]
        500:
          description: Failure.
    post:
      operationId: makeEdge
      summary: creates an edge 
      description: |
        Used to set new edges. If the edge is formative, then a node is also formed.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: param1
        description: |
          The value to update the key with. There can be
          50 of those. For example;  param1="value1",
          param2 ="another value" depending on the edge's
          default constructor variable count.
        schema:
          type: string
          required: 
            - param1
          example: param1
          properties:
            param1:
              type: string
              example: my tweet
      responses:
        200:
          description: Result ID
          schema:
            type: string
            example: "5b44b304ab56d70ff5f48fd461db7669"
        500:
          description: Failure.


definitions:
  Node:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        format: uuid
        example: 5f3246a92bef76fd58485e72dea7d9b7
      context:
        type: string
        format: uuid
        example: 36544668db4ac1a35ca32bffdd056184
      creator:
        type: string
        format: uuid
        example: 49ad16d29900f22e021467b46707130e
      class:
        type: string
        example: "PhoNetworksAutogenerated\\Status"

  NodeEdge:
    type: object
    required:
    - id
    - classes
    properties:
      id:
        type: string
        format: uuid
        example: 8b79d958f3bb5b625808f490a3ec0ed6
      classes:
        type: array
        items:
          type: string
        example: [
                "PhoNetworksAutogenerated\\UserOut\\Post",
                "Pho\\Kernel\\Foundation\\ActorOut\\Write",
                "Pho\\Framework\\ActorOut\\Write",
                "Pho\\Framework\\ActorOut\\Subscribe",
                "Pho\\Framework\\AbstractEdge",
                "Pho\\Lib\\Graph\\Edge"
          ]

  Edge:
    type: object
    required:
    - id
    - head
    - tail
    properties:
      id:
        type: string
        format: uuid
        example: 8b79d958f3bb5b625808f490a3ec0ed6     
      head:
        type: string
        format: uuid
        example: 5f3246a92bef76fd58485e72dea7d9b7
      tail:
        type: string
        format: uuid
        example: 49ad16d29900f22e021467b46707130e
      class:
        type: string
        example: "PhoNetworksAutogenerated\\UserOut\\Post"

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /phonetworks/server-rest/1.1.0
schemes:
 - https